1. program test (input, output);

2.   var a : integer;

3.   var b : real;

4.   var c : array [1..2] of integer;

5. 

6.   function fun1(x:integer; y:real; 

7.                   z:array [1..2] of integer; 

8.                   q: real) : integer;

9.     var d: integer;

10.     begin

11.       a:= 2;

12.       z[a] := 4;

13.       c[2] := 3;

14.       fun1 := c[1]
TYPE_ERR: EXPECTED TYPE: (FUNCTION) RECEIVED TYPE: (INTEGER)

15.      end;

16. 

17.    function fun2(x: integer; y: integer) : real;

18.      var e: real;

19. 

20.      function fun3(n: integer; z: real) : integer;

21.        var e: integer;

22.        begin

23.          a:= e;

24.          e:= c[e];

25.          fun3 := 3
TYPE_ERR: EXPECTED TYPE: (FUNCTION) RECEIVED TYPE: (INTEGER)

26.        end;

27. 

28.      begin

29.        a:= fun1(x, e, c, b);
TYPE_ERR: EXPECTED TYPE: (REAL) RECEIVED TYPE: (INTEGER)

30.        x:= fun3(c[1], e);
TYPE_ERR: EXPECTED TYPE: (REAL) RECEIVED TYPE: (INTEGER)

31.        e := e + 4.44;
TYPE_ERR: EXPECTED TYPE: (INTEGER) RECEIVED TYPE: (REAL)

32.        a:= (a mod y) div x;

33.        while ((a >= 4) and ((b <= e) 
TYPE_ERR: EXPECTED TYPE: (REAL) RECEIVED TYPE: (INTEGER)

34.                        or (not (a = c[a])))) do

35.          begin

36.            a:= c[a] + 1

37.          end;

38.        fun2 := 2.5 
TYPE_ERR: EXPECTED TYPE: (FUNCTION) RECEIVED TYPE: (REAL)

39.      end;

40. 

41. begin

42.   b:= fun2(c[4], c[5]);

43.   b:= fun2(c[4],2);

44.   if (a < 2) then a:= 1 else a := a + 2;

45.   if (b > 4.2) then a := c[a]

46. end.

